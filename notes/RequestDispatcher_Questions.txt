*   Explain RequestDispatcher in detail ?

>>  The RequestDispatcher interface in Java provides a mechanism to forward a request to another resource, such as 
    another servlet, JSP, or HTML file, or to include the response from another resource in the current response. 
    
    It allows one servlet to delegate the processing of a request to another servlet, enabling the separation of concerns 
    and modular design of web applications.

    It is used for two main tasks:

        (1) Forwarding a Request: 
        
            - Forwarding the request to another servlet, JSP etc so that the same request can be processed or a response 
              can be generated by that resource.

        (2) Including a Resource: 
        
            - Including the response from another resource in the current response. 
            
            - This means the content of the included resource is inserted into the response of the current resource.

    Key Methods:

        (1) forward(ServletRequest request, ServletResponse response):

            - This method forwards the request to another resource (e.g. servlet, JSP, or HTML file) for further processing.
            
            - When a request is forwarded using this method, the response is committed by the resource that processes 
              the request (the target resource). 
              
            - No further processing occurs in the original servlet after forwarding the request.

            Example:
        
                ```
                    RequestDispatcher dispatcher = request.getRequestDispatcher("/anotherServlet");
                    dispatcher.forward(request, response);
                ```

        (2) include(ServletRequest request, ServletResponse response):

            - This method allows the inclusion of content from another resource into the current response. 
            
            - The resource is processed, and its output is included in the current response.
            
            - The output from the included resource is inserted into the original response, but the original servlet can 
              still write to the response after the inclusion.
            
            Example:

                ```
                    RequestDispatcher dispatcher = request.getRequestDispatcher("/header.jsp");
                    dispatcher.include(request, response);
                ```

    How to Obtain a RequestDispatcher:

        
        (1) Using getRequestDispatcher(String path): 
        
            - This method is used when you want to forward or include the request to/from a resource relative to the 
              current request.

            - The path is typically relative to the context of the web application (i.e., it starts with / to denote 
              the root of the web application (WAR package)).
            
            Example:

                ```
                    RequestDispatcher dispatcher = request.getRequestDispatcher("/result.jsp");
                    dispatcher.forward(request, response);
                ```

        (2) Using getServletContext().getRequestDispatcher(String path): 
        
            - This method is used when you need to access resources within the entire web application, not just relative 
              to the current request. 
              
            - It's typically used for resources that are not part of the current request's context.

            Example:

                ```
                    ServletContext context = getServletContext();
                    RequestDispatcher dispatcher = context.getRequestDispatcher("/WEB-INF/views/otherPage.jsp");
                    dispatcher.include(request, response);
                ```

    Example: 

        - If the login is successful, the request is forwarded to welcome.jsp.
        
        - If the login fails, the response is included from loginFailed.jsp, so the error message can be displayed on the same page.

        ```
            public class LoginServlet extends HttpServlet {
                
                @Override
                protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
                    
                    String username = request.getParameter("username");
                    String password = request.getParameter("password");

                    if ("admin".equals(username) && "password".equals(password)) {

                        // Forwarding the request to another servlet or JSP
                        RequestDispatcher dispatcher = request.getRequestDispatcher("/welcome.jsp");
                        dispatcher.forward(request, response);

                    } else {

                        // Including the error message in the response
                        RequestDispatcher dispatcher = request.getRequestDispatcher("/loginFailed.jsp");
                        dispatcher.include(request, response);
                    }
                }
            }
        ```

________________________________________________________________________________________________________________________